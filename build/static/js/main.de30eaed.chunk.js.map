{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Loader.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","color","margin","input","marginRight","TodoItem","_ref","todo","index","onChange","removeTodo","useContext","classes","completed","push","react_default","a","createElement","style","className","join","type","checked","id","title","onClick","bind","ul","listStyle","TodoList","props","todos","map","Todo_TodoItem","key","onToggle","Loader","AddTodo","lazy","Promise","resolve","setTimeout","__webpack_require__","e","then","App","_React$useState","useState","_React$useState2","Object","slicedToArray","setTodos","_React$useState3","_React$useState4","loading","setLoading","useEffect","fetch","response","json","context","Provider","value","filter","Suspense","fallback","onCreate","concat","Date","now","length","Todo_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kJAIeA,EAFCC,IAAMC,gBCEhBC,EAAS,CACbC,GAAI,CACFC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,QAAS,aACTC,OAAQ,iBACRC,aAAc,MACdC,aAAc,QACdC,MAAO,UACPC,OAAQ,QAEVC,MAAO,CACLC,YAAa,SAuCFC,MAnCf,SAAAC,GAA6C,IAAzBC,EAAyBD,EAAzBC,KAAMC,EAAmBF,EAAnBE,MAAOC,EAAYH,EAAZG,SACvBC,EAAeC,qBAAWtB,GAA1BqB,WACFE,EAAU,GAMhB,OAJIL,EAAKM,WACPD,EAAQE,KAAK,QAIbC,EAAAC,EAAAC,cAAA,MAAIC,MAAO1B,EAAOC,IAChBsB,EAAAC,EAAAC,cAAA,QAAME,UAAWP,EAAQQ,KAAK,MAC5BL,EAAAC,EAAAC,cAAA,SACEI,KAAK,WACLC,QAASf,EAAKM,UACdK,MAAO1B,EAAOW,MACdM,SAAU,kBAAMA,EAASF,EAAKgB,OAEhCR,EAAAC,EAAAC,cAAA,cAAST,EAAQ,GAPnB,OASGD,EAAKiB,OAGRT,EAAAC,EAAAC,cAAA,UAAQE,UAAU,KAAKM,QAASf,EAAWgB,KAAK,KAAMnB,EAAKgB,KAA3D,UCvCA/B,EAAS,CACbmC,GAAI,CACFC,UAAW,OACX1B,OAAQ,EACRL,QAAS,IA0BEgC,MAtBf,SAAkBC,GAChB,OACEf,EAAAC,EAAAC,cAAA,MAAIC,MAAO1B,EAAOmC,IACfG,EAAMC,MAAMC,IAAI,SAACzB,EAAMC,GACtB,OACEO,EAAAC,EAAAC,cAACgB,EAAD,CACE1B,KAAMA,EACN2B,IAAK3B,EAAKgB,GACVf,MAAOA,EACPC,SAAUqB,EAAMK,eCnBbC,EAAA,kBACbrB,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAExB,QAAS,OAAQC,eAAgB,SAAUO,OAAQ,UAC/Da,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBCCbkB,EAAU/C,IAAMgD,KACpB,kBACE,IAAIC,QAAQ,SAAAC,GACVC,WAAW,WACTD,EAAQE,EAAAC,EAAA,GAAAC,KAAAF,EAAAhB,KAAA,YACP,SAmEMmB,MA/Df,WAAe,IAAAC,EACaxD,IAAMyD,SAAS,IAD5BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNf,EADMiB,EAAA,GACCG,EADDH,EAAA,GAAAI,EAEiB9D,IAAMyD,UAAS,GAFhCM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAENE,EAFMD,EAAA,GAEGE,EAFHF,EAAA,GA0Cb,OAtCAG,oBAAU,WACRC,MAAM,6DACHb,KAAK,SAAAc,GAAQ,OAAIA,EAASC,SAC1Bf,KAAK,SAAAb,GACJU,WAAW,WACTU,EAASpB,GACTwB,GAAW,IACV,QAEN,IA8BDxC,EAAAC,EAAAC,cAAC2C,EAAQC,SAAT,CAAkBC,MAAO,CAAEpD,WAjB7B,SAAoBa,GAClB4B,EAASpB,EAAMgC,OAAO,SAAAxD,GAAI,OAAIA,EAAKgB,KAAOA,QAiBxCR,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAA,yBAGAF,EAAAC,EAAAC,cAACF,EAAAC,EAAMgD,SAAP,CAAgBC,SAAUlD,EAAAC,EAAAC,cAACmB,EAAD,OACxBrB,EAAAC,EAAAC,cAACoB,EAAD,CAAS6B,SAnBjB,SAAiB1C,GACf2B,EACEpB,EAAMoC,OAAO,CACX,CACE3C,QACAD,GAAI6C,KAAKC,MACTxD,WAAW,UAgBZyC,GAAWvC,EAAAC,EAAAC,cAACmB,EAAD,MACXL,EAAMuC,OACLvD,EAAAC,EAAAC,cAACsD,EAAD,CAAUxC,MAAOA,EAAOI,SAvChC,SAAoBZ,GAClB4B,EACEpB,EAAMC,IAAI,SAAAzB,GAIR,OAHIA,EAAKgB,KAAOA,IACdhB,EAAKM,WAAaN,EAAKM,WAElBN,QAkCH+C,EAAU,KACZvC,EAAAC,EAAAC,cAAA,0BC1DUuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.de30eaed.chunk.js","sourcesContent":["import React from 'react'\n\nconst Context = React.createContext()\n\nexport default Context\n","import React, { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport Context from '../context'\n\nconst styles = {\n  li: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: '.5rem 1rem',\n    border: '1px solid #ccc',\n    borderRadius: '4px',\n    marginBottom: '.5rem',\n    color: '#EFEFF1',\n    margin: '10px'\n  },\n  input: {\n    marginRight: '1rem'\n  }\n}\n\nfunction TodoItem({ todo, index, onChange }) {\n  const { removeTodo } = useContext(Context)\n  const classes = []\n\n  if (todo.completed) {\n    classes.push('done')\n  }\n\n  return (\n    <li style={styles.li}>\n      <span className={classes.join(' ')}>\n        <input\n          type='checkbox'\n          checked={todo.completed}\n          style={styles.input}\n          onChange={() => onChange(todo.id)}\n        />\n        <strong>{index + 1}</strong>\n        &nbsp;\n        {todo.title}\n      </span>\n\n      <button className='rm' onClick={removeTodo.bind(null, todo.id)}>\n        &times;\n      </button>\n    </li>\n  )\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.object.isRequired,\n  index: PropTypes.number,\n  onChange: PropTypes.func.isRequired\n}\n\nexport default TodoItem\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport TodoItem from './TodoItem'\n\nconst styles = {\n  ul: {\n    listStyle: 'none',\n    margin: 0,\n    padding: 0\n  }\n}\n\nfunction TodoList(props) {\n  return (\n    <ul style={styles.ul}>\n      {props.todos.map((todo, index) => {\n        return (\n          <TodoItem\n            todo={todo}\n            key={todo.id}\n            index={index}\n            onChange={props.onToggle}\n          />\n        )\n      })}\n    </ul>\n  )\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onToggle: PropTypes.func.isRequired\n}\n\nexport default TodoList\n","import React from 'react'\n\nexport default () => (\n  <div style={{ display: 'flex', justifyContent: 'center', margin: '.5rem' }}>\n    <div className='lds-dual-ring' />\n  </div>\n)\n","import React, { useEffect } from 'react'\nimport TodoList from './Todo/TodoList'\nimport Context from './context'\nimport Loader from './Loader'\n\nconst AddTodo = React.lazy(\n  () =>\n    new Promise(resolve => {\n      setTimeout(() => {\n        resolve(import('./Todo/AddTodo'))\n      }, 100)\n    })\n)\n\nfunction App() {\n  const [todos, setTodos] = React.useState([])\n  const [loading, setLoading] = React.useState(true)\n\n  useEffect(() => {\n    fetch('https://my-json-server.typicode.com/DenysSepta/demo/posts')\n      .then(response => response.json())\n      .then(todos => {\n        setTimeout(() => {\n          setTodos(todos)\n          setLoading(false)\n        }, 2000)\n      })\n  }, [])\n\n  function toggleTodo(id) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed\n        }\n        return todo\n      })\n    )\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  function addTodo(title) {\n    setTodos(\n      todos.concat([\n        {\n          title,\n          id: Date.now(),\n          completed: false\n        }\n      ])\n    )\n  }\n\n  return (\n    <Context.Provider value={{ removeTodo }}>\n      <div className='wrapper'>\n        <h1>React ToDo </h1>\n        \n\n        <React.Suspense fallback={<Loader />}>\n          <AddTodo onCreate={addTodo} />\n        </React.Suspense>\n\n        {loading && <Loader />}\n        {todos.length ? (\n          <TodoList todos={todos} onToggle={toggleTodo} />\n        ) : loading ? null : (\n          <h1>No todos!</h1>\n        )}\n      </div>\n    </Context.Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}